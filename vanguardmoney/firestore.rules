// Reglas de seguridad para Cloud Firestore
// Estas reglas deben ser configuradas en la consola de Firebase
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Reglas para la colección de usuarios
    match /users/{userId} {
      // Permitir lectura y escritura solo al propietario del documento
      allow read, write: if request.auth != null 
                         && request.auth.uid == userId;
      
      // Permitir crear documento solo si el UID coincide con el usuario autenticado
      allow create: if request.auth != null 
                    && request.auth.uid == userId
                    && validateUserData();
      
      // Permitir actualizar solo campos específicos
      allow update: if request.auth != null 
                    && request.auth.uid == userId
                    && validateUserUpdate();
    }
    
    // Función para validar datos de usuario en creación
    function validateUserData() {
      let requiredFields = ['uid', 'username', 'email', 'currency', 'createdAt', 'verified', 'loginAttempts'];
      
      return request.resource.data.keys().hasAll(requiredFields) &&
             request.resource.data.uid is string &&
             request.resource.data.username is string &&
             request.resource.data.username.size() >= 3 &&
             request.resource.data.username.size() <= 30 &&
             request.resource.data.email is string &&
             request.resource.data.email.matches('.*@.*\\..*') &&
             request.resource.data.currency is string &&
             request.resource.data.currency in ['S/', '$', '€', '£', '¥', 'C$', 'A$'] &&
             request.resource.data.createdAt is timestamp &&
             request.resource.data.verified is bool &&
             request.resource.data.loginAttempts is int &&
             request.resource.data.loginAttempts >= 0;
    }
    
    // Función para validar actualizaciones de usuario
    function validateUserUpdate() {
      // Lista de campos que se pueden actualizar
      let allowedFields = ['username', 'currency', 'verified', 'loginAttempts', 'lastAttempt'];
      
      // Solo permitir cambios en campos específicos
      return request.resource.data.diff(resource.data).affectedKeys()
             .hasOnly(allowedFields) &&
             
             // Validar que el UID y email no cambien
             request.resource.data.uid == resource.data.uid &&
             request.resource.data.email == resource.data.email &&
             
             // Validar tipos de datos en actualización
             (
               !request.resource.data.diff(resource.data).affectedKeys().hasAny(['username']) ||
               (request.resource.data.username is string &&
                request.resource.data.username.size() >= 3 &&
                request.resource.data.username.size() <= 30)
             ) &&
             (
               !request.resource.data.diff(resource.data).affectedKeys().hasAny(['currency']) ||
               request.resource.data.currency in ['S/', '$', '€', '£', '¥', 'C$', 'A$']
             ) &&
             (
               !request.resource.data.diff(resource.data).affectedKeys().hasAny(['verified']) ||
               request.resource.data.verified is bool
             ) &&
             (
               !request.resource.data.diff(resource.data).affectedKeys().hasAny(['loginAttempts']) ||
               (request.resource.data.loginAttempts is int &&
                request.resource.data.loginAttempts >= 0)
             ) &&
             (
               !request.resource.data.diff(resource.data).affectedKeys().hasAny(['lastAttempt']) ||
               request.resource.data.lastAttempt is timestamp
             );
    }
    
    // Denegar acceso a cualquier otra colección por defecto
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

/*
INSTRUCCIONES PARA CONFIGURAR LAS REGLAS:

1. Ve a la consola de Firebase: https://console.firebase.google.com/
2. Selecciona tu proyecto VanguardMoney
3. En el menú lateral, haz clic en "Firestore Database"
4. Ve a la pestaña "Reglas" (Rules)
5. Copia y pega el contenido de este archivo (desde rules_version hasta el final del último })
6. Haz clic en "Publicar" (Publish)

CARACTERÍSTICAS DE SEGURIDAD IMPLEMENTADAS:

✅ Solo usuarios autenticados pueden acceder a sus propios documentos
✅ Validación estricta de tipos de datos
✅ Prevención de modificación de campos críticos (uid, email)
✅ Validación de formatos (email, longitud de username)
✅ Restricción de monedas a solo las soportadas
✅ Protección contra acceso no autorizado a otras colecciones
✅ Validación de campos requeridos en creación
✅ Control granular de qué campos se pueden actualizar

TESTING DE REGLAS:

Para probar las reglas, puedes usar el simulador de reglas en Firebase Console:
1. Ve a la pestaña "Reglas" en Firestore
2. Haz clic en "Simular reglas"
3. Prueba diferentes operaciones con diferentes usuarios

MONITOREO:

Revisa regularmente los logs de seguridad en:
Firebase Console > Firestore > Monitoring > Security Rules
*/